package ViewControl;
/**
 *
 * To change this generated comment edit the template variable "typecomment":
 * Window>Preferences>Java>Templates.
 * To enable and disable the creation of type comments go to
 * Window>Preferences>Java>Code Generation.
 */

import java.awt.*;
import java.awt.event.*;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;

import Model.Bowler;
import Model.EndGamePrompt;
import Model.EndGameReport;
import Model.Lane;
import Model.LaneEvent;
import Model.LaneObserver;
import Model.Pinsetter;
import Model.PinsetterEvent;
import Model.PinsetterObserver;
import Model.ScoreReport;

public class LaneStatusView implements ActionListener, LaneObserver, PinsetterObserver {

	private JPanel jp;

	private JLabel curBowler, foul, pinsDown;
	private JButton viewLane;
	private JButton viewPinSetter, maintenance;

	private PinSetterView psv;
	private LaneView lv;
	private Lane lane;
	int laneNum;

	boolean laneShowing;
	boolean psShowing;

	public LaneStatusView(Lane lane, int laneNum ) {

		this.lane = lane;
		this.laneNum = laneNum;

		laneShowing=false;
		psShowing=false;

		psv = new PinSetterView( laneNum );
		Pinsetter ps = lane.getPinsetter();
		ps.subscribe(psv);

		lv = new LaneView( lane, laneNum );
		lane.subscribe(lv);


		jp = new JPanel();
		jp.setLayout(new FlowLayout());
		JLabel cLabel = new JLabel( "Now Bowling: " );
		curBowler = new JLabel( "(no one)" );
		JLabel fLabel = new JLabel( "Foul: " );
		foul = new JLabel( " " );
		JLabel pdLabel = new JLabel( "Pins Down: " );
		pinsDown = new JLabel( "0" );

		// Button Panel
		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new FlowLayout());

		Insets buttonMargin = new Insets(4, 4, 4, 4);

		viewLane = new JButton("View Lane");
		JPanel viewLanePanel = new JPanel();
		viewLanePanel.setLayout(new FlowLayout());
		viewLane.addActionListener(this);
		viewLanePanel.add(viewLane);

		viewPinSetter = new JButton("Pinsetter");
		JPanel viewPinSetterPanel = new JPanel();
		viewPinSetterPanel.setLayout(new FlowLayout());
		viewPinSetter.addActionListener(this);
		viewPinSetterPanel.add(viewPinSetter);

		maintenance = new JButton("     ");
		maintenance.setBackground( Color.GREEN );
		JPanel maintenancePanel = new JPanel();
		maintenancePanel.setLayout(new FlowLayout());
		maintenance.addActionListener(this);
		maintenancePanel.add(maintenance);

		viewLane.setEnabled( false );
		viewPinSetter.setEnabled( false );


		buttonPanel.add(viewLanePanel);
		buttonPanel.add(viewPinSetterPanel);
		buttonPanel.add(maintenancePanel);

		jp.add( cLabel );
		jp.add( curBowler );
//		jp.add( fLabel );
//		jp.add( foul );
		jp.add( pdLabel );
		jp.add( pinsDown );
		
		jp.add(buttonPanel);

	}

	public JPanel showLane() {
		return jp;
	}

	public void actionPerformed( ActionEvent e ) {
		if ( lane.isPartyAssigned() ) { 
			if (e.getSource().equals(viewPinSetter)) {
				if ( psShowing == false ) {
					psv.show();
					psShowing=true;
				} else if ( psShowing == true ) {
					psv.hide();
					psShowing=false;
				}
			}
		}
		if (e.getSource().equals(viewLane)) {
			if ( lane.isPartyAssigned() ) { 
				if ( laneShowing == false ) {
					lv.show();
					laneShowing=true;
				} else if ( laneShowing == true ) {
					lv.hide();
					laneShowing=false;
				}
			}
		}
		if (e.getSource().equals(maintenance)) {
			if ( lane.isPartyAssigned() ) {
				lane.unPauseGame();
				maintenance.setBackground( Color.GREEN );
			}
		}
	}

	public void receiveLaneEvent(LaneEvent le) {
		Lane lane = le.getLane();
		
		if(lane.isGameFinished() && lane.isPartyAssigned()){ // Start end of game routine
			
			EndGamePrompt egp = new EndGamePrompt( ((Bowler) le.getParty().getMembers().get(0)).getNickName() + "'s Party" );
			int result = egp.getResult();
			egp.distroy();
			egp = null;
			
			System.out.println("result was: " + result);
			
			if (result == 1) {					// yes, want to play again
				lane.resetScores();
				lane.resetBowlerIterator();
			}
			else if (result == 2) {// no, dont want to play another game
				Vector printVector;	
				EndGameReport egr = new EndGameReport( ((Bowler)le.getParty().getMembers().get(0)).getNickName() + "'s Party", le.getParty());
				printVector = egr.getResult();
				Iterator scoreIt = le.getParty().getMembers().iterator();
				lane.clearLane();
				
				int myIndex = 0;
				while (scoreIt.hasNext()){
					Bowler thisBowler = (Bowler)scoreIt.next();
					ScoreReport sr = new ScoreReport( thisBowler, lane.getFinalScores()[myIndex++], lane.getGameNumber() );
					sr.sendEmail(thisBowler.getEmail());
					Iterator printIt = printVector.iterator();
					while (printIt.hasNext()){
						if (thisBowler.getNick() == (String)printIt.next()){
							System.out.println("Printing " + thisBowler.getNick());
							sr.sendPrintout();
						}
					}

				}
			}
		}
		
			
//			else if (partyAssigned && gameFinished) {
//				EndGamePrompt egp = new EndGamePrompt( ((Bowler) party.getMembers().get(0)).getNickName() + "'s Party" );
//				int result = egp.getResult();
//				egp.distroy();
//				egp = null;
//				
//				
//				System.out.println("result was: " + result);
//				
//				// TODO: send record of scores to control desk
//				if (result == 1) {					// yes, want to play again
//					resetScores();
//					resetBowlerIterator();
//					
//				} else if (result == 2) {// no, dont want to play another game
//					Vector printVector;	
//					EndGameReport egr = new EndGameReport( ((Bowler)party.getMembers().get(0)).getNickName() + "'s Party", party);
//					printVector = egr.getResult();
//					partyAssigned = false;
//					Iterator scoreIt = party.getMembers().iterator();
//					party = null;
//					partyAssigned = false;
//					
//					publish(lanePublish());
//					
//					int myIndex = 0;
//					while (scoreIt.hasNext()){
//						Bowler thisBowler = (Bowler)scoreIt.next();
//						ScoreReport sr = new ScoreReport( thisBowler, finalScores[myIndex++], gameNumber );
//						sr.sendEmail(thisBowler.getEmail());
//						Iterator printIt = printVector.iterator();
//						while (printIt.hasNext()){
//							if (thisBowler.getNick() == (String)printIt.next()){
//								System.out.println("Printing " + thisBowler.getNick());
//								sr.sendPrintout();
//							}
//						}
//
//					}
//				}
//			}
			
			
		curBowler.setText( ( (Bowler)le.getBowler()).getNickName() );
		if ( le.isMechanicalProblem() ) {
			maintenance.setBackground( Color.RED );
		}	
		if ( lane.isPartyAssigned() == false ) {
			viewLane.setEnabled( false );
			viewPinSetter.setEnabled( false );
		} else {
			viewLane.setEnabled( true );
			viewPinSetter.setEnabled( true );
		}
	}

	public void receivePinsetterEvent(PinsetterEvent pe) {
		pinsDown.setText( ( new Integer(pe.totalPinsDown()) ).toString() );
//		foul.setText( ( new Boolean(pe.isFoulCommited()) ).toString() );
		
	}

}
